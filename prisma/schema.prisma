// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
  disabled = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum Category {
  CLOTHING
  SHOES
}

enum Subcategory {
  JACKETS
  COATS
  TRENCH
  GILETS
  OVERSHIRTS
  SWEATERS
  CARDIGANS
  QUILTED
}

enum Colour {
  BEIGE
  BLACK
}

enum UserStatus {
  NOT_REGISTERED
  ACTIVE
  BLOCKED
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  phone     String     @unique
  email     String     @unique
  hash      String?
  salt      String?
  addresses Address[]
  orders    Order[]
  status    UserStatus @default(NOT_REGISTERED)
  role      UserRole   @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  category     Category
  subcategory  Subcategory
  title        String
  colour       Colour
  description  String
  composition  String
  size         Size[]
  price        Float
  brand        String?
  collection   String?
  manufacturer String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  files        String[]
  orderId      String?     @db.ObjectId
  quantity     Int         @default(5)

  OrderItem OrderItem[]
}

model Review {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  rating    Float
  productId String @unique @db.ObjectId
}

model File {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  key         String   @unique
  name        String
  contentType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  address   String
  moreInfo  String?
  zipCode   String
  city      String
  state     String
  country   String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  orderItems OrderItem[]

  user User @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int

  Order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Subscription {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String       @unique
  firstName   String?
  lastName    String?
  preferences Preferences?
}

model Preferences {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  receiveNewsletter Boolean      @default(false)
  productUpdates    Boolean      @default(false)
  subscriptionId    String       @unique @db.ObjectId
  subscription      Subscription @relation(fields: [subscriptionId], references: [id])
}
